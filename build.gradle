buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
		// maven { url "http://repo.spring.io/snapshot" }
		// maven { url "http://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
	junitJupiterVersion    = '5.2.0'
	junitPlatformVersion   = '1.2.0'
	junitVintageVersion    = '5.2.0'
}

// Special syntax for overriding spring-boot-dependencies
// ext['spring.version'] = '5.0.6.RELEASE'

repositories {
	mavenCentral()
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter")
	// compile instead of testCompile since we implement extensions in src/main/java
	compile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")

	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
	testCompile("org.junit.jupiter:junit-jupiter-migrationsupport:${junitJupiterVersion}")
	testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
	testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
}

test {
	useJUnitPlatform()

	testLogging {
		events "passed", "skipped", "failed" // "standardOut", "standardError"
	}
}

wrapper {
	gradleVersion = '4.8.1'
}
